# git-cliff configuration for ferrous-di
# Generates changelog from conventional commits

[changelog]
# changelog header
header = """
# Changelog

All notable changes to ferrous-di will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

<!-- next-header -->
"""
# template for the changelog body
# https://keats.github.io/tera/docs/#introduction
body = """
{%- macro remote_url() -%}
  https://github.com/s1ntropy/ferrous
{%- endmacro -%}

{% macro print_commit(commit) -%}
    - {% if commit.scope %}**{{commit.scope}}**: {% endif %}{{ commit.message | upper_first }}{% if commit.links %} ([{{ commit.id | truncate(length=7, end="") }}]({{ self::remote_url() }}/commit/{{ commit.id }})){% for link in commit.links %}, closes [#{{ link }}]({{ self::remote_url() }}/issues/{{ link }}){% endfor %}{% endif %}
{%- endmacro -%}

{% if version -%}
    ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else -%}
    ## [Unreleased]
{% endif -%}

{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits
    | filter(attribute="scope")
    | sort(attribute="scope") %}
        {{ self::print_commit(commit=commit) }}
    {%- endfor -%}
    {% raw %}\n{% endraw %}
    {%- for commit in commits %}
        {%- if not commit.scope -%}
            {{ self::print_commit(commit=commit) }}
        {% endif -%}
    {% endfor -%}
{% endfor %}\n
"""
# template for the changelog footer
footer = """
<!-- generated by git-cliff -->
"""
# remove the leading and trailing whitespace from the templates
trim = true
# postprocessors to apply to the generated changelog
postprocessors = [
  # { pattern = '<REPO>', replace = "https://github.com/s1ntropy/ferrous" }, # replace repository URL
]

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# process each line of a commit as an individual commit
split_commits = false
# regex for preprocessing the commit messages
commit_preprocessors = [
  # remove issue numbers from commits
  { pattern = '\((\w+\s)?#([0-9]+)\)', replace = ""},
  # Replace dependabot commits
  { pattern = '^build\(deps\): bump (.*)', replace = "build: bump ${1}"},
]
# regex for parsing and grouping commits
commit_parsers = [
  { message = "^feat", group = "🚀 Features" },
  { message = "^fix", group = "🐛 Bug Fixes" },
  { message = "^doc", group = "📚 Documentation" },
  { message = "^perf", group = "⚡ Performance" },
  { message = "^refactor", group = "♻️ Refactor" },
  { message = "^style", group = "🎨 Styling" },
  { message = "^test", group = "🧪 Testing" },
  { message = "^chore\\(release\\): prepare for", skip = true },
  { message = "^chore\\(deps.*\\)", skip = true },
  { message = "^chore\\(pr\\)", skip = true },
  { message = "^chore\\(pull\\)", skip = true },
  { message = "^chore|^ci", group = "⚙️ Miscellaneous Tasks" },
  { message = "^build", group = "🔨 Build" },
  # parse the "type!" syntax used for breaking changes
  { message = "^feat!", group = "🚨 Breaking Changes" },
  { message = "^fix!", group = "🚨 Breaking Changes" },
  { message = "^refactor!", group = "🚨 Breaking Changes" },
  { message = ".*", group = "📦 Other" },
]
# protect breaking changes from being skipped due to matching a skipping commit_parser
protect_breaking_commits = false
# filter out the commits that are not matched by commit parsers
filter_commits = false
# regex for matching git tags
# tag_pattern = "v[0-9].*"
# regex for skipping tags
# skip_tags = ""
# regex for ignoring tags
# ignore_tags = ""
# sort the tags topologically
topo_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"
# limit the number of commits included in the changelog.
# limit_commits = 42

[bump]
# bump the version for the commits in the given file
features_always_bump_minor = true
breaking_always_bump_major = true
custom_major_increment_regex = "^(feat|fix|refactor)!.*"
custom_minor_increment_regex = "^feat.*"
custom_patch_increment_regex = "^(fix|perf).*"