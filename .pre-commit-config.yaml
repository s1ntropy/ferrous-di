# Pre-commit hooks configuration for Ferrous DI
# This file defines automated checks that run before each commit
# Install with: pip install pre-commit && pre-commit install

# See https://pre-commit.com for more information
# See https://pre-commit.com/hooks.html for more hooks

# Minimum pre-commit version
minimum_pre_commit_version: '3.0.0'

# Default language version
default_language_version:
  python: python3
  rust: '1.70.0'

# Repository-wide settings
repos:
  # Built-in generic hooks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      # File format checks
      - id: trailing-whitespace
        args: ['--markdown-linebreak-ext=md']
      - id: end-of-file-fixer
      - id: check-yaml
        args: ['--multi', '--unsafe']  # Allow multiple docs, custom tags
      - id: check-toml
      - id: check-json
      - id: pretty-format-json
        args: ['--autofix', '--no-sort-keys']
      
      # Git checks
      - id: check-added-large-files
        args: ['--maxkb=1024']  # 1MB limit
      - id: check-merge-conflict
      - id: check-vcs-permalinks
      - id: forbid-new-submodules
      
      # General checks
      - id: check-case-conflict
      - id: mixed-line-ending
        args: ['--fix=lf']
      - id: check-executables-have-shebangs
      - id: check-shebang-scripts-are-executable

  # Rust-specific hooks
  - repo: local
    hooks:
      # Rust formatting with rustfmt
      - id: rust-fmt
        name: Rust Format
        entry: cargo fmt
        language: system
        files: \.rs$
        pass_filenames: false
        
      # Rust linting with clippy
      - id: rust-clippy
        name: Rust Clippy
        entry: cargo clippy
        language: system
        args: ['--all-targets', '--all-features', '--', '-D', 'warnings']
        files: \.rs$
        pass_filenames: false
        
      # Rust testing - run tests before commit
      - id: rust-test
        name: Rust Tests
        entry: cargo test
        language: system
        args: ['--all-features']
        files: \.rs$
        pass_filenames: false
        stages: [commit]
        
      # Check that Cargo.toml is valid
      - id: cargo-check
        name: Cargo Check
        entry: cargo check
        language: system
        args: ['--all-features']
        files: \.(rs|toml)$
        pass_filenames: false
        
      # Security audit
      - id: cargo-audit
        name: Cargo Audit
        entry: cargo audit
        language: system
        files: Cargo\.(toml|lock)$
        pass_filenames: false
        stages: [push]  # Only run on push to avoid blocking commits
        
      # Documentation check
      - id: cargo-doc
        name: Cargo Doc
        entry: cargo doc
        language: system
        args: ['--no-deps', '--document-private-items', '--all-features']
        files: \.rs$
        pass_filenames: false
        stages: [push]  # Only run on push
        
  # Additional Rust tooling
  - repo: https://github.com/doublify/pre-commit-rust
    rev: v1.0
    hooks:
      # Check for unused dependencies (requires nightly)
      - id: cargo-udeps
        stages: [manual]  # Only run manually
        
  # Markdown formatting and linting
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.37.0
    hooks:
      - id: markdownlint
        args: ['--fix', '--config', '.markdownlint.json']
        files: \.md$
        
  # YAML formatting
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v3.0.3
    hooks:
      - id: prettier
        files: \.(yaml|yml)$
        args: ['--write', '--tab-width', '2']
        
  # Security scanning
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        args: ['--baseline', '.secrets.baseline']
        exclude: \.lock$
        
  # Spell checking
  - repo: https://github.com/codespell-project/codespell
    rev: v2.2.6
    hooks:
      - id: codespell
        args: ['--write-changes']
        additional_dependencies: [tomli]
        
  # Shell script linting
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.6
    hooks:
      - id: shellcheck
        args: ['-e', 'SC2148']  # Ignore shebang requirement for some scripts

# Custom hook configurations

# Stages configuration
# - commit: Run on every commit (fast checks only)
# - push: Run on push (slower checks allowed)  
# - manual: Only run when explicitly invoked

# Performance optimizations
default_stages: [commit]
fail_fast: false  # Run all hooks even if one fails

# CI-specific configuration
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit hooks
    
    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: []
  submodules: false

# Hook-specific exclude patterns
exclude: |
  (?x)^(
      target/.*|
      \.git/.*|
      .*\.lock$|
      .*\.bin$|
      .*\.exe$|
      benches/criterion/.*
  )$